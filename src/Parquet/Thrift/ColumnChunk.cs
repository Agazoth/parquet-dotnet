#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
//using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
//using Thrift.Transport;
//using Thrift.Transport.Client;
//using Thrift.Transport.Server;
//using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

  public partial class ColumnChunk : TBase
  {
    private string _file_path;
    private global::Parquet.Thrift.ColumnMetaData _meta_data;
    private long _offset_index_offset;
    private int _offset_index_length;
    private long _column_index_offset;
    private int _column_index_length;
    private global::Parquet.Thrift.ColumnCryptoMetaData _crypto_metadata;
    private byte[] _encrypted_column_metadata;

    /// <summary>
    /// File where column data is stored.  If not set, assumed to be same file as
    /// metadata.  This path is relative to the current file.
    /// 
    /// </summary>
    public string File_path
    {
      get
      {
        return _file_path;
      }
      set
      {
        __isset.file_path = true;
        this._file_path = value;
      }
    }

    /// <summary>
    /// Byte offset in file_path to the ColumnMetaData *
    /// </summary>
    public long File_offset { get; set; }

    /// <summary>
    /// Column metadata for this chunk. This is the same content as what is at
    /// file_path/file_offset.  Having it here has it replicated in the file
    /// metadata.
    /// 
    /// </summary>
    public global::Parquet.Thrift.ColumnMetaData Meta_data
    {
      get
      {
        return _meta_data;
      }
      set
      {
        __isset.meta_data = true;
        this._meta_data = value;
      }
    }

    /// <summary>
    /// File offset of ColumnChunk's OffsetIndex *
    /// </summary>
    public long Offset_index_offset
    {
      get
      {
        return _offset_index_offset;
      }
      set
      {
        __isset.offset_index_offset = true;
        this._offset_index_offset = value;
      }
    }

    /// <summary>
    /// Size of ColumnChunk's OffsetIndex, in bytes *
    /// </summary>
    public int Offset_index_length
    {
      get
      {
        return _offset_index_length;
      }
      set
      {
        __isset.offset_index_length = true;
        this._offset_index_length = value;
      }
    }

    /// <summary>
    /// File offset of ColumnChunk's ColumnIndex *
    /// </summary>
    public long Column_index_offset
    {
      get
      {
        return _column_index_offset;
      }
      set
      {
        __isset.column_index_offset = true;
        this._column_index_offset = value;
      }
    }

    /// <summary>
    /// Size of ColumnChunk's ColumnIndex, in bytes *
    /// </summary>
    public int Column_index_length
    {
      get
      {
        return _column_index_length;
      }
      set
      {
        __isset.column_index_length = true;
        this._column_index_length = value;
      }
    }

    /// <summary>
    /// Crypto metadata of encrypted columns *
    /// </summary>
    public global::Parquet.Thrift.ColumnCryptoMetaData Crypto_metadata
    {
      get
      {
        return _crypto_metadata;
      }
      set
      {
        __isset.crypto_metadata = true;
        this._crypto_metadata = value;
      }
    }

    /// <summary>
    /// Encrypted column metadata for this chunk *
    /// </summary>
    public byte[] Encrypted_column_metadata
    {
      get
      {
        return _encrypted_column_metadata;
      }
      set
      {
        __isset.encrypted_column_metadata = true;
        this._encrypted_column_metadata = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool file_path;
      public bool meta_data;
      public bool offset_index_offset;
      public bool offset_index_length;
      public bool column_index_offset;
      public bool column_index_length;
      public bool crypto_metadata;
      public bool encrypted_column_metadata;
    }

    public ColumnChunk()
    {
    }

    public ColumnChunk(long file_offset) : this()
    {
      this.File_offset = file_offset;
    }

    public ColumnChunk DeepCopy()
    {
      var tmp198 = new ColumnChunk();
      if((File_path != null) && __isset.file_path)
      {
        tmp198.File_path = this.File_path;
      }
      tmp198.__isset.file_path = this.__isset.file_path;
      tmp198.File_offset = this.File_offset;
      if((Meta_data != null) && __isset.meta_data)
      {
        tmp198.Meta_data = (global::Parquet.Thrift.ColumnMetaData)this.Meta_data.DeepCopy();
      }
      tmp198.__isset.meta_data = this.__isset.meta_data;
      if(__isset.offset_index_offset)
      {
        tmp198.Offset_index_offset = this.Offset_index_offset;
      }
      tmp198.__isset.offset_index_offset = this.__isset.offset_index_offset;
      if(__isset.offset_index_length)
      {
        tmp198.Offset_index_length = this.Offset_index_length;
      }
      tmp198.__isset.offset_index_length = this.__isset.offset_index_length;
      if(__isset.column_index_offset)
      {
        tmp198.Column_index_offset = this.Column_index_offset;
      }
      tmp198.__isset.column_index_offset = this.__isset.column_index_offset;
      if(__isset.column_index_length)
      {
        tmp198.Column_index_length = this.Column_index_length;
      }
      tmp198.__isset.column_index_length = this.__isset.column_index_length;
      if((Crypto_metadata != null) && __isset.crypto_metadata)
      {
        tmp198.Crypto_metadata = (global::Parquet.Thrift.ColumnCryptoMetaData)this.Crypto_metadata.DeepCopy();
      }
      tmp198.__isset.crypto_metadata = this.__isset.crypto_metadata;
      if((Encrypted_column_metadata != null) && __isset.encrypted_column_metadata)
      {
        tmp198.Encrypted_column_metadata = this.Encrypted_column_metadata.ToArray();
      }
      tmp198.__isset.encrypted_column_metadata = this.__isset.encrypted_column_metadata;
      return tmp198;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_file_offset = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                File_path = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                File_offset = await iprot.ReadI64Async(cancellationToken);
                isset_file_offset = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Meta_data = new global::Parquet.Thrift.ColumnMetaData();
                await Meta_data.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                Offset_index_offset = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                Offset_index_length = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                Column_index_offset = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I32)
              {
                Column_index_length = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Struct)
              {
                Crypto_metadata = new global::Parquet.Thrift.ColumnCryptoMetaData();
                await Crypto_metadata.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.String)
              {
                Encrypted_column_metadata = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_file_offset)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp199 = new TStruct("ColumnChunk");
        await oprot.WriteStructBeginAsync(tmp199, cancellationToken);
        var tmp200 = new TField();
        if((File_path != null) && __isset.file_path)
        {
          tmp200.Name = "file_path";
          tmp200.Type = TType.String;
          tmp200.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await oprot.WriteStringAsync(File_path, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp200.Name = "file_offset";
        tmp200.Type = TType.I64;
        tmp200.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
        await oprot.WriteI64Async(File_offset, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Meta_data != null) && __isset.meta_data)
        {
          tmp200.Name = "meta_data";
          tmp200.Type = TType.Struct;
          tmp200.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await Meta_data.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.offset_index_offset)
        {
          tmp200.Name = "offset_index_offset";
          tmp200.Type = TType.I64;
          tmp200.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await oprot.WriteI64Async(Offset_index_offset, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.offset_index_length)
        {
          tmp200.Name = "offset_index_length";
          tmp200.Type = TType.I32;
          tmp200.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await oprot.WriteI32Async(Offset_index_length, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.column_index_offset)
        {
          tmp200.Name = "column_index_offset";
          tmp200.Type = TType.I64;
          tmp200.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await oprot.WriteI64Async(Column_index_offset, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.column_index_length)
        {
          tmp200.Name = "column_index_length";
          tmp200.Type = TType.I32;
          tmp200.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await oprot.WriteI32Async(Column_index_length, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Crypto_metadata != null) && __isset.crypto_metadata)
        {
          tmp200.Name = "crypto_metadata";
          tmp200.Type = TType.Struct;
          tmp200.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await Crypto_metadata.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Encrypted_column_metadata != null) && __isset.encrypted_column_metadata)
        {
          tmp200.Name = "encrypted_column_metadata";
          tmp200.Type = TType.String;
          tmp200.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp200, cancellationToken);
          await oprot.WriteBinaryAsync(Encrypted_column_metadata, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ColumnChunk other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.file_path == other.__isset.file_path) && ((!__isset.file_path) || (global::System.Object.Equals(File_path, other.File_path))))
        && global::System.Object.Equals(File_offset, other.File_offset)
        && ((__isset.meta_data == other.__isset.meta_data) && ((!__isset.meta_data) || (global::System.Object.Equals(Meta_data, other.Meta_data))))
        && ((__isset.offset_index_offset == other.__isset.offset_index_offset) && ((!__isset.offset_index_offset) || (global::System.Object.Equals(Offset_index_offset, other.Offset_index_offset))))
        && ((__isset.offset_index_length == other.__isset.offset_index_length) && ((!__isset.offset_index_length) || (global::System.Object.Equals(Offset_index_length, other.Offset_index_length))))
        && ((__isset.column_index_offset == other.__isset.column_index_offset) && ((!__isset.column_index_offset) || (global::System.Object.Equals(Column_index_offset, other.Column_index_offset))))
        && ((__isset.column_index_length == other.__isset.column_index_length) && ((!__isset.column_index_length) || (global::System.Object.Equals(Column_index_length, other.Column_index_length))))
        && ((__isset.crypto_metadata == other.__isset.crypto_metadata) && ((!__isset.crypto_metadata) || (global::System.Object.Equals(Crypto_metadata, other.Crypto_metadata))))
        && ((__isset.encrypted_column_metadata == other.__isset.encrypted_column_metadata) && ((!__isset.encrypted_column_metadata) || (TCollections.Equals(Encrypted_column_metadata, other.Encrypted_column_metadata))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((File_path != null) && __isset.file_path)
        {
          hashcode = (hashcode * 397) + File_path.GetHashCode();
        }
        hashcode = (hashcode * 397) + File_offset.GetHashCode();
        if((Meta_data != null) && __isset.meta_data)
        {
          hashcode = (hashcode * 397) + Meta_data.GetHashCode();
        }
        if(__isset.offset_index_offset)
        {
          hashcode = (hashcode * 397) + Offset_index_offset.GetHashCode();
        }
        if(__isset.offset_index_length)
        {
          hashcode = (hashcode * 397) + Offset_index_length.GetHashCode();
        }
        if(__isset.column_index_offset)
        {
          hashcode = (hashcode * 397) + Column_index_offset.GetHashCode();
        }
        if(__isset.column_index_length)
        {
          hashcode = (hashcode * 397) + Column_index_length.GetHashCode();
        }
        if((Crypto_metadata != null) && __isset.crypto_metadata)
        {
          hashcode = (hashcode * 397) + Crypto_metadata.GetHashCode();
        }
        if((Encrypted_column_metadata != null) && __isset.encrypted_column_metadata)
        {
          hashcode = (hashcode * 397) + Encrypted_column_metadata.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp201 = new StringBuilder("ColumnChunk(");
      int tmp202 = 0;
      if((File_path != null) && __isset.file_path)
      {
        if(0 < tmp202++) { tmp201.Append(", "); }
        tmp201.Append("File_path: ");
        File_path.ToString(tmp201);
      }
      if(0 < tmp202) { tmp201.Append(", "); }
      tmp201.Append("File_offset: ");
      File_offset.ToString(tmp201);
      if((Meta_data != null) && __isset.meta_data)
      {
        tmp201.Append(", Meta_data: ");
        Meta_data.ToString(tmp201);
      }
      if(__isset.offset_index_offset)
      {
        tmp201.Append(", Offset_index_offset: ");
        Offset_index_offset.ToString(tmp201);
      }
      if(__isset.offset_index_length)
      {
        tmp201.Append(", Offset_index_length: ");
        Offset_index_length.ToString(tmp201);
      }
      if(__isset.column_index_offset)
      {
        tmp201.Append(", Column_index_offset: ");
        Column_index_offset.ToString(tmp201);
      }
      if(__isset.column_index_length)
      {
        tmp201.Append(", Column_index_length: ");
        Column_index_length.ToString(tmp201);
      }
      if((Crypto_metadata != null) && __isset.crypto_metadata)
      {
        tmp201.Append(", Crypto_metadata: ");
        Crypto_metadata.ToString(tmp201);
      }
      if((Encrypted_column_metadata != null) && __isset.encrypted_column_metadata)
      {
        tmp201.Append(", Encrypted_column_metadata: ");
        Encrypted_column_metadata.ToString(tmp201);
      }
      tmp201.Append(')');
      return tmp201.ToString();
    }
  }

}
