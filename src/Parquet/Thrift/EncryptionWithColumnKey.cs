#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
//using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
//using Thrift.Transport;
//using Thrift.Transport.Client;
//using Thrift.Transport.Server;
//using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

  public partial class EncryptionWithColumnKey : TBase
  {
    private byte[] _key_metadata;

    /// <summary>
    /// Column path in schema *
    /// </summary>
    public List<string> Path_in_schema { get; set; }

    /// <summary>
    /// Retrieval metadata of column encryption key *
    /// </summary>
    public byte[] Key_metadata
    {
      get
      {
        return _key_metadata;
      }
      set
      {
        __isset.key_metadata = true;
        this._key_metadata = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool key_metadata;
    }

    public EncryptionWithColumnKey()
    {
    }

    public EncryptionWithColumnKey(List<string> path_in_schema) : this()
    {
      this.Path_in_schema = path_in_schema;
    }

    public EncryptionWithColumnKey DeepCopy()
    {
      var tmp184 = new EncryptionWithColumnKey();
      if((Path_in_schema != null))
      {
        tmp184.Path_in_schema = this.Path_in_schema.DeepCopy();
      }
      if((Key_metadata != null) && __isset.key_metadata)
      {
        tmp184.Key_metadata = this.Key_metadata.ToArray();
      }
      tmp184.__isset.key_metadata = this.__isset.key_metadata;
      return tmp184;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_path_in_schema = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list185 = await iprot.ReadListBeginAsync(cancellationToken);
                  Path_in_schema = new List<string>(_list185.Count);
                  for(int _i186 = 0; _i186 < _list185.Count; ++_i186)
                  {
                    string _elem187;
                    _elem187 = await iprot.ReadStringAsync(cancellationToken);
                    Path_in_schema.Add(_elem187);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_path_in_schema = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Key_metadata = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_path_in_schema)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp188 = new TStruct("EncryptionWithColumnKey");
        await oprot.WriteStructBeginAsync(tmp188, cancellationToken);
        var tmp189 = new TField();
        if((Path_in_schema != null))
        {
          tmp189.Name = "path_in_schema";
          tmp189.Type = TType.List;
          tmp189.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp189, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Path_in_schema.Count), cancellationToken);
            foreach (string _iter190 in Path_in_schema)
            {
              await oprot.WriteStringAsync(_iter190, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Key_metadata != null) && __isset.key_metadata)
        {
          tmp189.Name = "key_metadata";
          tmp189.Type = TType.String;
          tmp189.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp189, cancellationToken);
          await oprot.WriteBinaryAsync(Key_metadata, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is EncryptionWithColumnKey other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Path_in_schema, other.Path_in_schema)
        && ((__isset.key_metadata == other.__isset.key_metadata) && ((!__isset.key_metadata) || (TCollections.Equals(Key_metadata, other.Key_metadata))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Path_in_schema != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Path_in_schema);
        }
        if((Key_metadata != null) && __isset.key_metadata)
        {
          hashcode = (hashcode * 397) + Key_metadata.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp191 = new StringBuilder("EncryptionWithColumnKey(");
      if((Path_in_schema != null))
      {
        tmp191.Append(", Path_in_schema: ");
        Path_in_schema.ToString(tmp191);
      }
      if((Key_metadata != null) && __isset.key_metadata)
      {
        tmp191.Append(", Key_metadata: ");
        Key_metadata.ToString(tmp191);
      }
      tmp191.Append(')');
      return tmp191.ToString();
    }
  }

}
