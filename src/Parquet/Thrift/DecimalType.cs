#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
//using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
//using Thrift.Transport;
//using Thrift.Transport.Client;
//using Thrift.Transport.Server;
//using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

  /// <summary>
  /// Decimal logical type annotation
  /// 
  /// To maintain forward-compatibility in v1, implementations using this logical
  /// type must also set scale and precision on the annotated SchemaElement.
  /// 
  /// Allowed for physical types: INT32, INT64, FIXED, and BINARY
  /// </summary>
  public partial class DecimalType : TBase
  {

    public int Scale { get; set; }

    public int Precision { get; set; }

    public DecimalType()
    {
    }

    public DecimalType(int scale, int precision) : this()
    {
      this.Scale = scale;
      this.Precision = precision;
    }

    public DecimalType DeepCopy()
    {
      var tmp33 = new DecimalType();
      tmp33.Scale = this.Scale;
      tmp33.Precision = this.Precision;
      return tmp33;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_scale = false;
        bool isset_precision = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Scale = await iprot.ReadI32Async(cancellationToken);
                isset_scale = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Precision = await iprot.ReadI32Async(cancellationToken);
                isset_precision = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_scale)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_precision)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp34 = new TStruct("DecimalType");
        await oprot.WriteStructBeginAsync(tmp34, cancellationToken);
        var tmp35 = new TField();
        tmp35.Name = "scale";
        tmp35.Type = TType.I32;
        tmp35.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
        await oprot.WriteI32Async(Scale, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp35.Name = "precision";
        tmp35.Type = TType.I32;
        tmp35.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
        await oprot.WriteI32Async(Precision, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is DecimalType other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Scale, other.Scale)
        && global::System.Object.Equals(Precision, other.Precision);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Scale.GetHashCode();
        hashcode = (hashcode * 397) + Precision.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp36 = new StringBuilder("DecimalType(");
      tmp36.Append(", Scale: ");
      Scale.ToString(tmp36);
      tmp36.Append(", Precision: ");
      Precision.ToString(tmp36);
      tmp36.Append(')');
      return tmp36.ToString();
    }
  }

}
