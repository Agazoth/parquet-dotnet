#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
//using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
//using Thrift.Transport;
//using Thrift.Transport.Client;
//using Thrift.Transport.Server;
//using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

  /// <summary>
  /// The algorithm used in Bloom filter. *
  /// </summary>
  public partial class BloomFilterAlgorithm : TBase
  {
    private global::Parquet.Thrift.SplitBlockAlgorithm _BLOCK;

    /// <summary>
    /// Block-based Bloom filter. *
    /// </summary>
    public global::Parquet.Thrift.SplitBlockAlgorithm BLOCK
    {
      get
      {
        return _BLOCK;
      }
      set
      {
        __isset.BLOCK = true;
        this._BLOCK = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool BLOCK;
    }

    public BloomFilterAlgorithm()
    {
    }

    public BloomFilterAlgorithm DeepCopy()
    {
      var tmp111 = new BloomFilterAlgorithm();
      if((BLOCK != null) && __isset.BLOCK)
      {
        tmp111.BLOCK = (global::Parquet.Thrift.SplitBlockAlgorithm)this.BLOCK.DeepCopy();
      }
      tmp111.__isset.BLOCK = this.__isset.BLOCK;
      return tmp111;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                BLOCK = new global::Parquet.Thrift.SplitBlockAlgorithm();
                await BLOCK.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp112 = new TStruct("BloomFilterAlgorithm");
        await oprot.WriteStructBeginAsync(tmp112, cancellationToken);
        var tmp113 = new TField();
        if((BLOCK != null) && __isset.BLOCK)
        {
          tmp113.Name = "BLOCK";
          tmp113.Type = TType.Struct;
          tmp113.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp113, cancellationToken);
          await BLOCK.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BloomFilterAlgorithm other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.BLOCK == other.__isset.BLOCK) && ((!__isset.BLOCK) || (global::System.Object.Equals(BLOCK, other.BLOCK))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((BLOCK != null) && __isset.BLOCK)
        {
          hashcode = (hashcode * 397) + BLOCK.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp114 = new StringBuilder("BloomFilterAlgorithm(");
      int tmp115 = 0;
      if((BLOCK != null) && __isset.BLOCK)
      {
        if(0 < tmp115++) { tmp114.Append(", "); }
        tmp114.Append("BLOCK: ");
        BLOCK.ToString(tmp114);
      }
      tmp114.Append(')');
      return tmp114.ToString();
    }
  }

}
