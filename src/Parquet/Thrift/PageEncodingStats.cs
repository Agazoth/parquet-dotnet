#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
//using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
//using Thrift.Transport;
//using Thrift.Transport.Client;
//using Thrift.Transport.Server;
//using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

  /// <summary>
  /// statistics of a given page type and encoding
  /// </summary>
  public partial class PageEncodingStats : TBase
  {

    /// <summary>
    /// the page type (data/dic/...) *
    /// 
    /// <seealso cref="global::Parquet.Thrift.PageType"/>
    /// </summary>
    public global::Parquet.Thrift.PageType Page_type { get; set; }

    /// <summary>
    /// encoding of the page *
    /// 
    /// <seealso cref="global::Parquet.Thrift.Encoding"/>
    /// </summary>
    public global::Parquet.Thrift.Encoding Encoding { get; set; }

    /// <summary>
    /// number of pages of this type with this encoding *
    /// </summary>
    public int Count { get; set; }

    public PageEncodingStats()
    {
    }

    public PageEncodingStats(global::Parquet.Thrift.PageType page_type, global::Parquet.Thrift.Encoding encoding, int count) : this()
    {
      this.Page_type = page_type;
      this.Encoding = encoding;
      this.Count = count;
    }

    public PageEncodingStats DeepCopy()
    {
      var tmp154 = new PageEncodingStats();
      tmp154.Page_type = this.Page_type;
      tmp154.Encoding = this.Encoding;
      tmp154.Count = this.Count;
      return tmp154;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_page_type = false;
        bool isset_encoding = false;
        bool isset_count = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Page_type = (global::Parquet.Thrift.PageType)await iprot.ReadI32Async(cancellationToken);
                isset_page_type = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Encoding = (global::Parquet.Thrift.Encoding)await iprot.ReadI32Async(cancellationToken);
                isset_encoding = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Count = await iprot.ReadI32Async(cancellationToken);
                isset_count = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_page_type)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_encoding)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_count)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp155 = new TStruct("PageEncodingStats");
        await oprot.WriteStructBeginAsync(tmp155, cancellationToken);
        var tmp156 = new TField();
        tmp156.Name = "page_type";
        tmp156.Type = TType.I32;
        tmp156.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp156, cancellationToken);
        await oprot.WriteI32Async((int)Page_type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp156.Name = "encoding";
        tmp156.Type = TType.I32;
        tmp156.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp156, cancellationToken);
        await oprot.WriteI32Async((int)Encoding, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp156.Name = "count";
        tmp156.Type = TType.I32;
        tmp156.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp156, cancellationToken);
        await oprot.WriteI32Async(Count, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is PageEncodingStats other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Page_type, other.Page_type)
        && global::System.Object.Equals(Encoding, other.Encoding)
        && global::System.Object.Equals(Count, other.Count);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Page_type.GetHashCode();
        hashcode = (hashcode * 397) + Encoding.GetHashCode();
        hashcode = (hashcode * 397) + Count.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp157 = new StringBuilder("PageEncodingStats(");
      tmp157.Append(", Page_type: ");
      Page_type.ToString(tmp157);
      tmp157.Append(", Encoding: ");
      Encoding.ToString(tmp157);
      tmp157.Append(", Count: ");
      Count.ToString(tmp157);
      tmp157.Append(')');
      return tmp157.ToString();
    }
  }

}
