#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
//using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
//using Thrift.Transport;
//using Thrift.Transport.Client;
//using Thrift.Transport.Server;
//using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

  public partial class BloomFilterCompression : TBase
  {
    private global::Parquet.Thrift.Uncompressed _UNCOMPRESSED;

    public global::Parquet.Thrift.Uncompressed UNCOMPRESSED
    {
      get
      {
        return _UNCOMPRESSED;
      }
      set
      {
        __isset.UNCOMPRESSED = true;
        this._UNCOMPRESSED = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool UNCOMPRESSED;
    }

    public BloomFilterCompression()
    {
    }

    public BloomFilterCompression DeepCopy()
    {
      var tmp129 = new BloomFilterCompression();
      if((UNCOMPRESSED != null) && __isset.UNCOMPRESSED)
      {
        tmp129.UNCOMPRESSED = (global::Parquet.Thrift.Uncompressed)this.UNCOMPRESSED.DeepCopy();
      }
      tmp129.__isset.UNCOMPRESSED = this.__isset.UNCOMPRESSED;
      return tmp129;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                UNCOMPRESSED = new global::Parquet.Thrift.Uncompressed();
                await UNCOMPRESSED.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp130 = new TStruct("BloomFilterCompression");
        await oprot.WriteStructBeginAsync(tmp130, cancellationToken);
        var tmp131 = new TField();
        if((UNCOMPRESSED != null) && __isset.UNCOMPRESSED)
        {
          tmp131.Name = "UNCOMPRESSED";
          tmp131.Type = TType.Struct;
          tmp131.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp131, cancellationToken);
          await UNCOMPRESSED.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BloomFilterCompression other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.UNCOMPRESSED == other.__isset.UNCOMPRESSED) && ((!__isset.UNCOMPRESSED) || (global::System.Object.Equals(UNCOMPRESSED, other.UNCOMPRESSED))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((UNCOMPRESSED != null) && __isset.UNCOMPRESSED)
        {
          hashcode = (hashcode * 397) + UNCOMPRESSED.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp132 = new StringBuilder("BloomFilterCompression(");
      int tmp133 = 0;
      if((UNCOMPRESSED != null) && __isset.UNCOMPRESSED)
      {
        if(0 < tmp133++) { tmp132.Append(", "); }
        tmp132.Append("UNCOMPRESSED: ");
        UNCOMPRESSED.ToString(tmp132);
      }
      tmp132.Append(')');
      return tmp132.ToString();
    }
  }

}
