#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
//using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{
  public static class parquetExtensions
  {
    public static bool Equals(this List<bool> instance, object that)
    {
      if (!(that is List<bool> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<bool> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<bool> DeepCopy(this List<bool> source)
    {
      if (source == null)
        return null;

      var tmp301 = new List<bool>(source.Count);
      foreach (var elem in source)
        tmp301.Add(elem);
      return tmp301;
    }


    public static bool Equals(this List<byte[]> instance, object that)
    {
      if (!(that is List<byte[]> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<byte[]> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<byte[]> DeepCopy(this List<byte[]> source)
    {
      if (source == null)
        return null;

      var tmp302 = new List<byte[]>(source.Count);
      foreach (var elem in source)
        tmp302.Add((elem != null) ? elem.ToArray() : null);
      return tmp302;
    }


    public static bool Equals(this List<global::Parquet.Thrift.ColumnChunk> instance, object that)
    {
      if (!(that is List<global::Parquet.Thrift.ColumnChunk> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Parquet.Thrift.ColumnChunk> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Parquet.Thrift.ColumnChunk> DeepCopy(this List<global::Parquet.Thrift.ColumnChunk> source)
    {
      if (source == null)
        return null;

      var tmp303 = new List<global::Parquet.Thrift.ColumnChunk>(source.Count);
      foreach (var elem in source)
        tmp303.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp303;
    }


    public static bool Equals(this List<global::Parquet.Thrift.ColumnOrder> instance, object that)
    {
      if (!(that is List<global::Parquet.Thrift.ColumnOrder> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Parquet.Thrift.ColumnOrder> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Parquet.Thrift.ColumnOrder> DeepCopy(this List<global::Parquet.Thrift.ColumnOrder> source)
    {
      if (source == null)
        return null;

      var tmp304 = new List<global::Parquet.Thrift.ColumnOrder>(source.Count);
      foreach (var elem in source)
        tmp304.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp304;
    }


    public static bool Equals(this List<global::Parquet.Thrift.Encoding> instance, object that)
    {
      if (!(that is List<global::Parquet.Thrift.Encoding> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Parquet.Thrift.Encoding> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Parquet.Thrift.Encoding> DeepCopy(this List<global::Parquet.Thrift.Encoding> source)
    {
      if (source == null)
        return null;

      var tmp305 = new List<global::Parquet.Thrift.Encoding>(source.Count);
      foreach (var elem in source)
        tmp305.Add(elem);
      return tmp305;
    }


    public static bool Equals(this List<global::Parquet.Thrift.KeyValue> instance, object that)
    {
      if (!(that is List<global::Parquet.Thrift.KeyValue> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Parquet.Thrift.KeyValue> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Parquet.Thrift.KeyValue> DeepCopy(this List<global::Parquet.Thrift.KeyValue> source)
    {
      if (source == null)
        return null;

      var tmp306 = new List<global::Parquet.Thrift.KeyValue>(source.Count);
      foreach (var elem in source)
        tmp306.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp306;
    }


    public static bool Equals(this List<global::Parquet.Thrift.PageEncodingStats> instance, object that)
    {
      if (!(that is List<global::Parquet.Thrift.PageEncodingStats> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Parquet.Thrift.PageEncodingStats> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Parquet.Thrift.PageEncodingStats> DeepCopy(this List<global::Parquet.Thrift.PageEncodingStats> source)
    {
      if (source == null)
        return null;

      var tmp307 = new List<global::Parquet.Thrift.PageEncodingStats>(source.Count);
      foreach (var elem in source)
        tmp307.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp307;
    }


    public static bool Equals(this List<global::Parquet.Thrift.PageLocation> instance, object that)
    {
      if (!(that is List<global::Parquet.Thrift.PageLocation> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Parquet.Thrift.PageLocation> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Parquet.Thrift.PageLocation> DeepCopy(this List<global::Parquet.Thrift.PageLocation> source)
    {
      if (source == null)
        return null;

      var tmp308 = new List<global::Parquet.Thrift.PageLocation>(source.Count);
      foreach (var elem in source)
        tmp308.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp308;
    }


    public static bool Equals(this List<global::Parquet.Thrift.RowGroup> instance, object that)
    {
      if (!(that is List<global::Parquet.Thrift.RowGroup> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Parquet.Thrift.RowGroup> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Parquet.Thrift.RowGroup> DeepCopy(this List<global::Parquet.Thrift.RowGroup> source)
    {
      if (source == null)
        return null;

      var tmp309 = new List<global::Parquet.Thrift.RowGroup>(source.Count);
      foreach (var elem in source)
        tmp309.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp309;
    }


    public static bool Equals(this List<global::Parquet.Thrift.SchemaElement> instance, object that)
    {
      if (!(that is List<global::Parquet.Thrift.SchemaElement> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Parquet.Thrift.SchemaElement> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Parquet.Thrift.SchemaElement> DeepCopy(this List<global::Parquet.Thrift.SchemaElement> source)
    {
      if (source == null)
        return null;

      var tmp310 = new List<global::Parquet.Thrift.SchemaElement>(source.Count);
      foreach (var elem in source)
        tmp310.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp310;
    }


    public static bool Equals(this List<global::Parquet.Thrift.SortingColumn> instance, object that)
    {
      if (!(that is List<global::Parquet.Thrift.SortingColumn> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Parquet.Thrift.SortingColumn> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Parquet.Thrift.SortingColumn> DeepCopy(this List<global::Parquet.Thrift.SortingColumn> source)
    {
      if (source == null)
        return null;

      var tmp311 = new List<global::Parquet.Thrift.SortingColumn>(source.Count);
      foreach (var elem in source)
        tmp311.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp311;
    }


    public static bool Equals(this List<long> instance, object that)
    {
      if (!(that is List<long> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<long> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<long> DeepCopy(this List<long> source)
    {
      if (source == null)
        return null;

      var tmp312 = new List<long>(source.Count);
      foreach (var elem in source)
        tmp312.Add(elem);
      return tmp312;
    }


    public static bool Equals(this List<string> instance, object that)
    {
      if (!(that is List<string> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<string> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<string> DeepCopy(this List<string> source)
    {
      if (source == null)
        return null;

      var tmp313 = new List<string>(source.Count);
      foreach (var elem in source)
        tmp313.Add((elem != null) ? elem : null);
      return tmp313;
    }


  }
}
