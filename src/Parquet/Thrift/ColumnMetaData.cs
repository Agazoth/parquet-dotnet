#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
//using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
//using Thrift.Transport;
//using Thrift.Transport.Client;
//using Thrift.Transport.Server;
//using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

  /// <summary>
  /// Description for column metadata
  /// </summary>
  public partial class ColumnMetaData : TBase
  {
    private List<global::Parquet.Thrift.KeyValue> _key_value_metadata;
    private long _index_page_offset;
    private long _dictionary_page_offset;
    private global::Parquet.Thrift.Statistics _statistics;
    private List<global::Parquet.Thrift.PageEncodingStats> _encoding_stats;
    private long _bloom_filter_offset;

    /// <summary>
    /// Type of this column *
    /// 
    /// <seealso cref="global::Parquet.Thrift.Type"/>
    /// </summary>
    public global::Parquet.Thrift.Type Type { get; set; }

    /// <summary>
    /// Set of all encodings used for this column. The purpose is to validate
    /// whether we can decode those pages. *
    /// </summary>
    public List<global::Parquet.Thrift.Encoding> Encodings { get; set; }

    /// <summary>
    /// Path in schema *
    /// </summary>
    public List<string> Path_in_schema { get; set; }

    /// <summary>
    /// Compression codec *
    /// 
    /// <seealso cref="global::Parquet.Thrift.CompressionCodec"/>
    /// </summary>
    public global::Parquet.Thrift.CompressionCodec Codec { get; set; }

    /// <summary>
    /// Number of values in this column *
    /// </summary>
    public long Num_values { get; set; }

    /// <summary>
    /// total byte size of all uncompressed pages in this column chunk (including the headers) *
    /// </summary>
    public long Total_uncompressed_size { get; set; }

    /// <summary>
    /// total byte size of all compressed, and potentially encrypted, pages
    /// in this column chunk (including the headers) *
    /// </summary>
    public long Total_compressed_size { get; set; }

    /// <summary>
    /// Optional key/value metadata *
    /// </summary>
    public List<global::Parquet.Thrift.KeyValue> Key_value_metadata
    {
      get
      {
        return _key_value_metadata;
      }
      set
      {
        __isset.key_value_metadata = true;
        this._key_value_metadata = value;
      }
    }

    /// <summary>
    /// Byte offset from beginning of file to first data page *
    /// </summary>
    public long Data_page_offset { get; set; }

    /// <summary>
    /// Byte offset from beginning of file to root index page *
    /// </summary>
    public long Index_page_offset
    {
      get
      {
        return _index_page_offset;
      }
      set
      {
        __isset.index_page_offset = true;
        this._index_page_offset = value;
      }
    }

    /// <summary>
    /// Byte offset from the beginning of file to first (only) dictionary page *
    /// </summary>
    public long Dictionary_page_offset
    {
      get
      {
        return _dictionary_page_offset;
      }
      set
      {
        __isset.dictionary_page_offset = true;
        this._dictionary_page_offset = value;
      }
    }

    /// <summary>
    /// optional statistics for this column chunk
    /// </summary>
    public global::Parquet.Thrift.Statistics Statistics
    {
      get
      {
        return _statistics;
      }
      set
      {
        __isset.statistics = true;
        this._statistics = value;
      }
    }

    /// <summary>
    /// Set of all encodings used for pages in this column chunk.
    /// This information can be used to determine if all data pages are
    /// dictionary encoded for example *
    /// </summary>
    public List<global::Parquet.Thrift.PageEncodingStats> Encoding_stats
    {
      get
      {
        return _encoding_stats;
      }
      set
      {
        __isset.encoding_stats = true;
        this._encoding_stats = value;
      }
    }

    /// <summary>
    /// Byte offset from beginning of file to Bloom filter data. *
    /// </summary>
    public long Bloom_filter_offset
    {
      get
      {
        return _bloom_filter_offset;
      }
      set
      {
        __isset.bloom_filter_offset = true;
        this._bloom_filter_offset = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool key_value_metadata;
      public bool index_page_offset;
      public bool dictionary_page_offset;
      public bool statistics;
      public bool encoding_stats;
      public bool bloom_filter_offset;
    }

    public ColumnMetaData()
    {
    }

    public ColumnMetaData(global::Parquet.Thrift.Type type, List<global::Parquet.Thrift.Encoding> encodings, List<string> path_in_schema, global::Parquet.Thrift.CompressionCodec codec, long num_values, long total_uncompressed_size, long total_compressed_size, long data_page_offset) : this()
    {
      this.Type = type;
      this.Encodings = encodings;
      this.Path_in_schema = path_in_schema;
      this.Codec = codec;
      this.Num_values = num_values;
      this.Total_uncompressed_size = total_uncompressed_size;
      this.Total_compressed_size = total_compressed_size;
      this.Data_page_offset = data_page_offset;
    }

    public ColumnMetaData DeepCopy()
    {
      var tmp159 = new ColumnMetaData();
      tmp159.Type = this.Type;
      if((Encodings != null))
      {
        tmp159.Encodings = this.Encodings.DeepCopy();
      }
      if((Path_in_schema != null))
      {
        tmp159.Path_in_schema = this.Path_in_schema.DeepCopy();
      }
      tmp159.Codec = this.Codec;
      tmp159.Num_values = this.Num_values;
      tmp159.Total_uncompressed_size = this.Total_uncompressed_size;
      tmp159.Total_compressed_size = this.Total_compressed_size;
      if((Key_value_metadata != null) && __isset.key_value_metadata)
      {
        tmp159.Key_value_metadata = this.Key_value_metadata.DeepCopy();
      }
      tmp159.__isset.key_value_metadata = this.__isset.key_value_metadata;
      tmp159.Data_page_offset = this.Data_page_offset;
      if(__isset.index_page_offset)
      {
        tmp159.Index_page_offset = this.Index_page_offset;
      }
      tmp159.__isset.index_page_offset = this.__isset.index_page_offset;
      if(__isset.dictionary_page_offset)
      {
        tmp159.Dictionary_page_offset = this.Dictionary_page_offset;
      }
      tmp159.__isset.dictionary_page_offset = this.__isset.dictionary_page_offset;
      if((Statistics != null) && __isset.statistics)
      {
        tmp159.Statistics = (global::Parquet.Thrift.Statistics)this.Statistics.DeepCopy();
      }
      tmp159.__isset.statistics = this.__isset.statistics;
      if((Encoding_stats != null) && __isset.encoding_stats)
      {
        tmp159.Encoding_stats = this.Encoding_stats.DeepCopy();
      }
      tmp159.__isset.encoding_stats = this.__isset.encoding_stats;
      if(__isset.bloom_filter_offset)
      {
        tmp159.Bloom_filter_offset = this.Bloom_filter_offset;
      }
      tmp159.__isset.bloom_filter_offset = this.__isset.bloom_filter_offset;
      return tmp159;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_type = false;
        bool isset_encodings = false;
        bool isset_path_in_schema = false;
        bool isset_codec = false;
        bool isset_num_values = false;
        bool isset_total_uncompressed_size = false;
        bool isset_total_compressed_size = false;
        bool isset_data_page_offset = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Type = (global::Parquet.Thrift.Type)await iprot.ReadI32Async(cancellationToken);
                isset_type = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list160 = await iprot.ReadListBeginAsync(cancellationToken);
                  Encodings = new List<global::Parquet.Thrift.Encoding>(_list160.Count);
                  for(int _i161 = 0; _i161 < _list160.Count; ++_i161)
                  {
                    global::Parquet.Thrift.Encoding _elem162;
                    _elem162 = (global::Parquet.Thrift.Encoding)await iprot.ReadI32Async(cancellationToken);
                    Encodings.Add(_elem162);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_encodings = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list163 = await iprot.ReadListBeginAsync(cancellationToken);
                  Path_in_schema = new List<string>(_list163.Count);
                  for(int _i164 = 0; _i164 < _list163.Count; ++_i164)
                  {
                    string _elem165;
                    _elem165 = await iprot.ReadStringAsync(cancellationToken);
                    Path_in_schema.Add(_elem165);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_path_in_schema = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Codec = (global::Parquet.Thrift.CompressionCodec)await iprot.ReadI32Async(cancellationToken);
                isset_codec = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                Num_values = await iprot.ReadI64Async(cancellationToken);
                isset_num_values = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                Total_uncompressed_size = await iprot.ReadI64Async(cancellationToken);
                isset_total_uncompressed_size = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                Total_compressed_size = await iprot.ReadI64Async(cancellationToken);
                isset_total_compressed_size = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.List)
              {
                {
                  TList _list166 = await iprot.ReadListBeginAsync(cancellationToken);
                  Key_value_metadata = new List<global::Parquet.Thrift.KeyValue>(_list166.Count);
                  for(int _i167 = 0; _i167 < _list166.Count; ++_i167)
                  {
                    global::Parquet.Thrift.KeyValue _elem168;
                    _elem168 = new global::Parquet.Thrift.KeyValue();
                    await _elem168.ReadAsync(iprot, cancellationToken);
                    Key_value_metadata.Add(_elem168);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.I64)
              {
                Data_page_offset = await iprot.ReadI64Async(cancellationToken);
                isset_data_page_offset = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.I64)
              {
                Index_page_offset = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.I64)
              {
                Dictionary_page_offset = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.Struct)
              {
                Statistics = new global::Parquet.Thrift.Statistics();
                await Statistics.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.List)
              {
                {
                  TList _list169 = await iprot.ReadListBeginAsync(cancellationToken);
                  Encoding_stats = new List<global::Parquet.Thrift.PageEncodingStats>(_list169.Count);
                  for(int _i170 = 0; _i170 < _list169.Count; ++_i170)
                  {
                    global::Parquet.Thrift.PageEncodingStats _elem171;
                    _elem171 = new global::Parquet.Thrift.PageEncodingStats();
                    await _elem171.ReadAsync(iprot, cancellationToken);
                    Encoding_stats.Add(_elem171);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.I64)
              {
                Bloom_filter_offset = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_type)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_encodings)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_path_in_schema)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_codec)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_num_values)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_total_uncompressed_size)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_total_compressed_size)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_data_page_offset)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp172 = new TStruct("ColumnMetaData");
        await oprot.WriteStructBeginAsync(tmp172, cancellationToken);
        var tmp173 = new TField();
        tmp173.Name = "type";
        tmp173.Type = TType.I32;
        tmp173.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
        await oprot.WriteI32Async((int)Type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Encodings != null))
        {
          tmp173.Name = "encodings";
          tmp173.Type = TType.List;
          tmp173.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I32, Encodings.Count), cancellationToken);
            foreach (global::Parquet.Thrift.Encoding _iter174 in Encodings)
            {
              await oprot.WriteI32Async((int)_iter174, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Path_in_schema != null))
        {
          tmp173.Name = "path_in_schema";
          tmp173.Type = TType.List;
          tmp173.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Path_in_schema.Count), cancellationToken);
            foreach (string _iter175 in Path_in_schema)
            {
              await oprot.WriteStringAsync(_iter175, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp173.Name = "codec";
        tmp173.Type = TType.I32;
        tmp173.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
        await oprot.WriteI32Async((int)Codec, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp173.Name = "num_values";
        tmp173.Type = TType.I64;
        tmp173.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
        await oprot.WriteI64Async(Num_values, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp173.Name = "total_uncompressed_size";
        tmp173.Type = TType.I64;
        tmp173.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
        await oprot.WriteI64Async(Total_uncompressed_size, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp173.Name = "total_compressed_size";
        tmp173.Type = TType.I64;
        tmp173.ID = 7;
        await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
        await oprot.WriteI64Async(Total_compressed_size, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Key_value_metadata != null) && __isset.key_value_metadata)
        {
          tmp173.Name = "key_value_metadata";
          tmp173.Type = TType.List;
          tmp173.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Key_value_metadata.Count), cancellationToken);
            foreach (global::Parquet.Thrift.KeyValue _iter176 in Key_value_metadata)
            {
              await _iter176.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp173.Name = "data_page_offset";
        tmp173.Type = TType.I64;
        tmp173.ID = 9;
        await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
        await oprot.WriteI64Async(Data_page_offset, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if(__isset.index_page_offset)
        {
          tmp173.Name = "index_page_offset";
          tmp173.Type = TType.I64;
          tmp173.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
          await oprot.WriteI64Async(Index_page_offset, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.dictionary_page_offset)
        {
          tmp173.Name = "dictionary_page_offset";
          tmp173.Type = TType.I64;
          tmp173.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
          await oprot.WriteI64Async(Dictionary_page_offset, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Statistics != null) && __isset.statistics)
        {
          tmp173.Name = "statistics";
          tmp173.Type = TType.Struct;
          tmp173.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
          await Statistics.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Encoding_stats != null) && __isset.encoding_stats)
        {
          tmp173.Name = "encoding_stats";
          tmp173.Type = TType.List;
          tmp173.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Encoding_stats.Count), cancellationToken);
            foreach (global::Parquet.Thrift.PageEncodingStats _iter177 in Encoding_stats)
            {
              await _iter177.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.bloom_filter_offset)
        {
          tmp173.Name = "bloom_filter_offset";
          tmp173.Type = TType.I64;
          tmp173.ID = 14;
          await oprot.WriteFieldBeginAsync(tmp173, cancellationToken);
          await oprot.WriteI64Async(Bloom_filter_offset, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ColumnMetaData other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Type, other.Type)
        && TCollections.Equals(Encodings, other.Encodings)
        && TCollections.Equals(Path_in_schema, other.Path_in_schema)
        && global::System.Object.Equals(Codec, other.Codec)
        && global::System.Object.Equals(Num_values, other.Num_values)
        && global::System.Object.Equals(Total_uncompressed_size, other.Total_uncompressed_size)
        && global::System.Object.Equals(Total_compressed_size, other.Total_compressed_size)
        && ((__isset.key_value_metadata == other.__isset.key_value_metadata) && ((!__isset.key_value_metadata) || (TCollections.Equals(Key_value_metadata, other.Key_value_metadata))))
        && global::System.Object.Equals(Data_page_offset, other.Data_page_offset)
        && ((__isset.index_page_offset == other.__isset.index_page_offset) && ((!__isset.index_page_offset) || (global::System.Object.Equals(Index_page_offset, other.Index_page_offset))))
        && ((__isset.dictionary_page_offset == other.__isset.dictionary_page_offset) && ((!__isset.dictionary_page_offset) || (global::System.Object.Equals(Dictionary_page_offset, other.Dictionary_page_offset))))
        && ((__isset.statistics == other.__isset.statistics) && ((!__isset.statistics) || (global::System.Object.Equals(Statistics, other.Statistics))))
        && ((__isset.encoding_stats == other.__isset.encoding_stats) && ((!__isset.encoding_stats) || (TCollections.Equals(Encoding_stats, other.Encoding_stats))))
        && ((__isset.bloom_filter_offset == other.__isset.bloom_filter_offset) && ((!__isset.bloom_filter_offset) || (global::System.Object.Equals(Bloom_filter_offset, other.Bloom_filter_offset))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Type.GetHashCode();
        if((Encodings != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Encodings);
        }
        if((Path_in_schema != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Path_in_schema);
        }
        hashcode = (hashcode * 397) + Codec.GetHashCode();
        hashcode = (hashcode * 397) + Num_values.GetHashCode();
        hashcode = (hashcode * 397) + Total_uncompressed_size.GetHashCode();
        hashcode = (hashcode * 397) + Total_compressed_size.GetHashCode();
        if((Key_value_metadata != null) && __isset.key_value_metadata)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Key_value_metadata);
        }
        hashcode = (hashcode * 397) + Data_page_offset.GetHashCode();
        if(__isset.index_page_offset)
        {
          hashcode = (hashcode * 397) + Index_page_offset.GetHashCode();
        }
        if(__isset.dictionary_page_offset)
        {
          hashcode = (hashcode * 397) + Dictionary_page_offset.GetHashCode();
        }
        if((Statistics != null) && __isset.statistics)
        {
          hashcode = (hashcode * 397) + Statistics.GetHashCode();
        }
        if((Encoding_stats != null) && __isset.encoding_stats)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Encoding_stats);
        }
        if(__isset.bloom_filter_offset)
        {
          hashcode = (hashcode * 397) + Bloom_filter_offset.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp178 = new StringBuilder("ColumnMetaData(");
      tmp178.Append(", Type: ");
      Type.ToString(tmp178);
      if((Encodings != null))
      {
        tmp178.Append(", Encodings: ");
        Encodings.ToString(tmp178);
      }
      if((Path_in_schema != null))
      {
        tmp178.Append(", Path_in_schema: ");
        Path_in_schema.ToString(tmp178);
      }
      tmp178.Append(", Codec: ");
      Codec.ToString(tmp178);
      tmp178.Append(", Num_values: ");
      Num_values.ToString(tmp178);
      tmp178.Append(", Total_uncompressed_size: ");
      Total_uncompressed_size.ToString(tmp178);
      tmp178.Append(", Total_compressed_size: ");
      Total_compressed_size.ToString(tmp178);
      if((Key_value_metadata != null) && __isset.key_value_metadata)
      {
        tmp178.Append(", Key_value_metadata: ");
        Key_value_metadata.ToString(tmp178);
      }
      tmp178.Append(", Data_page_offset: ");
      Data_page_offset.ToString(tmp178);
      if(__isset.index_page_offset)
      {
        tmp178.Append(", Index_page_offset: ");
        Index_page_offset.ToString(tmp178);
      }
      if(__isset.dictionary_page_offset)
      {
        tmp178.Append(", Dictionary_page_offset: ");
        Dictionary_page_offset.ToString(tmp178);
      }
      if((Statistics != null) && __isset.statistics)
      {
        tmp178.Append(", Statistics: ");
        Statistics.ToString(tmp178);
      }
      if((Encoding_stats != null) && __isset.encoding_stats)
      {
        tmp178.Append(", Encoding_stats: ");
        Encoding_stats.ToString(tmp178);
      }
      if(__isset.bloom_filter_offset)
      {
        tmp178.Append(", Bloom_filter_offset: ");
        Bloom_filter_offset.ToString(tmp178);
      }
      tmp178.Append(')');
      return tmp178.ToString();
    }
  }

}
