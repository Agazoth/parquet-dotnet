#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
//using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
//using Thrift.Transport;
//using Thrift.Transport.Client;
//using Thrift.Transport.Server;
//using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

  /// <summary>
  /// Bloom filter header is stored at beginning of Bloom filter data of each column
  /// and followed by its bitset.
  /// 
  /// </summary>
  public partial class BloomFilterHeader : TBase
  {

    /// <summary>
    /// The size of bitset in bytes *
    /// </summary>
    public int NumBytes { get; set; }

    /// <summary>
    /// The algorithm for setting bits. *
    /// </summary>
    public global::Parquet.Thrift.BloomFilterAlgorithm Algorithm { get; set; }

    /// <summary>
    /// The hash function used for Bloom filter. *
    /// </summary>
    public global::Parquet.Thrift.BloomFilterHash Hash { get; set; }

    /// <summary>
    /// The compression used in the Bloom filter *
    /// </summary>
    public global::Parquet.Thrift.BloomFilterCompression Compression { get; set; }

    public BloomFilterHeader()
    {
    }

    public BloomFilterHeader(int numBytes, global::Parquet.Thrift.BloomFilterAlgorithm algorithm, global::Parquet.Thrift.BloomFilterHash hash, global::Parquet.Thrift.BloomFilterCompression compression) : this()
    {
      this.NumBytes = numBytes;
      this.Algorithm = algorithm;
      this.Hash = hash;
      this.Compression = compression;
    }

    public BloomFilterHeader DeepCopy()
    {
      var tmp134 = new BloomFilterHeader();
      tmp134.NumBytes = this.NumBytes;
      if((Algorithm != null))
      {
        tmp134.Algorithm = (global::Parquet.Thrift.BloomFilterAlgorithm)this.Algorithm.DeepCopy();
      }
      if((Hash != null))
      {
        tmp134.Hash = (global::Parquet.Thrift.BloomFilterHash)this.Hash.DeepCopy();
      }
      if((Compression != null))
      {
        tmp134.Compression = (global::Parquet.Thrift.BloomFilterCompression)this.Compression.DeepCopy();
      }
      return tmp134;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_numBytes = false;
        bool isset_algorithm = false;
        bool isset_hash = false;
        bool isset_compression = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                NumBytes = await iprot.ReadI32Async(cancellationToken);
                isset_numBytes = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Algorithm = new global::Parquet.Thrift.BloomFilterAlgorithm();
                await Algorithm.ReadAsync(iprot, cancellationToken);
                isset_algorithm = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Hash = new global::Parquet.Thrift.BloomFilterHash();
                await Hash.ReadAsync(iprot, cancellationToken);
                isset_hash = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Compression = new global::Parquet.Thrift.BloomFilterCompression();
                await Compression.ReadAsync(iprot, cancellationToken);
                isset_compression = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_numBytes)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_algorithm)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_hash)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_compression)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp135 = new TStruct("BloomFilterHeader");
        await oprot.WriteStructBeginAsync(tmp135, cancellationToken);
        var tmp136 = new TField();
        tmp136.Name = "numBytes";
        tmp136.Type = TType.I32;
        tmp136.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp136, cancellationToken);
        await oprot.WriteI32Async(NumBytes, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Algorithm != null))
        {
          tmp136.Name = "algorithm";
          tmp136.Type = TType.Struct;
          tmp136.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp136, cancellationToken);
          await Algorithm.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Hash != null))
        {
          tmp136.Name = "hash";
          tmp136.Type = TType.Struct;
          tmp136.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp136, cancellationToken);
          await Hash.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Compression != null))
        {
          tmp136.Name = "compression";
          tmp136.Type = TType.Struct;
          tmp136.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp136, cancellationToken);
          await Compression.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BloomFilterHeader other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(NumBytes, other.NumBytes)
        && global::System.Object.Equals(Algorithm, other.Algorithm)
        && global::System.Object.Equals(Hash, other.Hash)
        && global::System.Object.Equals(Compression, other.Compression);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + NumBytes.GetHashCode();
        if((Algorithm != null))
        {
          hashcode = (hashcode * 397) + Algorithm.GetHashCode();
        }
        if((Hash != null))
        {
          hashcode = (hashcode * 397) + Hash.GetHashCode();
        }
        if((Compression != null))
        {
          hashcode = (hashcode * 397) + Compression.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp137 = new StringBuilder("BloomFilterHeader(");
      tmp137.Append(", NumBytes: ");
      NumBytes.ToString(tmp137);
      if((Algorithm != null))
      {
        tmp137.Append(", Algorithm: ");
        Algorithm.ToString(tmp137);
      }
      if((Hash != null))
      {
        tmp137.Append(", Hash: ");
        Hash.ToString(tmp137);
      }
      if((Compression != null))
      {
        tmp137.Append(", Compression: ");
        Compression.ToString(tmp137);
      }
      tmp137.Append(')');
      return tmp137.ToString();
    }
  }

}
