#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
//using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
//using Thrift.Transport;
//using Thrift.Transport.Client;
//using Thrift.Transport.Server;
//using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

  /// <summary>
  /// The hash function used in Bloom filter. This function takes the hash of a column value
  /// using plain encoding.
  /// 
  /// </summary>
  public partial class BloomFilterHash : TBase
  {
    private global::Parquet.Thrift.XxHash _XXHASH;

    /// <summary>
    /// xxHash Strategy. *
    /// </summary>
    public global::Parquet.Thrift.XxHash XXHASH
    {
      get
      {
        return _XXHASH;
      }
      set
      {
        __isset.XXHASH = true;
        this._XXHASH = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool XXHASH;
    }

    public BloomFilterHash()
    {
    }

    public BloomFilterHash DeepCopy()
    {
      var tmp120 = new BloomFilterHash();
      if((XXHASH != null) && __isset.XXHASH)
      {
        tmp120.XXHASH = (global::Parquet.Thrift.XxHash)this.XXHASH.DeepCopy();
      }
      tmp120.__isset.XXHASH = this.__isset.XXHASH;
      return tmp120;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                XXHASH = new global::Parquet.Thrift.XxHash();
                await XXHASH.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp121 = new TStruct("BloomFilterHash");
        await oprot.WriteStructBeginAsync(tmp121, cancellationToken);
        var tmp122 = new TField();
        if((XXHASH != null) && __isset.XXHASH)
        {
          tmp122.Name = "XXHASH";
          tmp122.Type = TType.Struct;
          tmp122.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp122, cancellationToken);
          await XXHASH.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BloomFilterHash other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.XXHASH == other.__isset.XXHASH) && ((!__isset.XXHASH) || (global::System.Object.Equals(XXHASH, other.XXHASH))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((XXHASH != null) && __isset.XXHASH)
        {
          hashcode = (hashcode * 397) + XXHASH.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp123 = new StringBuilder("BloomFilterHash(");
      int tmp124 = 0;
      if((XXHASH != null) && __isset.XXHASH)
      {
        if(0 < tmp124++) { tmp123.Append(", "); }
        tmp123.Append("XXHASH: ");
        XXHASH.ToString(tmp123);
      }
      tmp123.Append(')');
      return tmp123.ToString();
    }
  }

}
