#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
/*
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
//using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
//using Thrift.Transport;
//using Thrift.Transport.Client;
//using Thrift.Transport.Server;
//using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Parquet.Thrift
{

  /// <summary>
  /// Description for ColumnIndex.
  /// Each &lt;array-field&gt;[i] refers to the page at OffsetIndex.page_locations[i]
  /// </summary>
  public partial class ColumnIndex : TBase
  {
    private List<long> _null_counts;

    /// <summary>
    /// A list of Boolean values to determine the validity of the corresponding
    /// min and max values. If true, a page contains only null values, and writers
    /// have to set the corresponding entries in min_values and max_values to
    /// byte[0], so that all lists have the same length. If false, the
    /// corresponding entries in min_values and max_values must be valid.
    /// </summary>
    public List<bool> Null_pages { get; set; }

    /// <summary>
    /// Two lists containing lower and upper bounds for the values of each page
    /// determined by the ColumnOrder of the column. These may be the actual
    /// minimum and maximum values found on a page, but can also be (more compact)
    /// values that do not exist on a page. For example, instead of storing ""Blart
    /// Versenwald III", a writer may set min_values[i]="B", max_values[i]="C".
    /// Such more compact values must still be valid values within the column's
    /// logical type. Readers must make sure that list entries are populated before
    /// using them by inspecting null_pages.
    /// </summary>
    public List<byte[]> Min_values { get; set; }

    public List<byte[]> Max_values { get; set; }

    /// <summary>
    /// Stores whether both min_values and max_values are orderd and if so, in
    /// which direction. This allows readers to perform binary searches in both
    /// lists. Readers cannot assume that max_values[i] &lt;= min_values[i+1], even
    /// if the lists are ordered.
    /// 
    /// <seealso cref="global::Parquet.Thrift.BoundaryOrder"/>
    /// </summary>
    public global::Parquet.Thrift.BoundaryOrder Boundary_order { get; set; }

    /// <summary>
    /// A list containing the number of null values for each page *
    /// </summary>
    public List<long> Null_counts
    {
      get
      {
        return _null_counts;
      }
      set
      {
        __isset.null_counts = true;
        this._null_counts = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool null_counts;
    }

    public ColumnIndex()
    {
    }

    public ColumnIndex(List<bool> null_pages, List<byte[]> min_values, List<byte[]> max_values, global::Parquet.Thrift.BoundaryOrder boundary_order) : this()
    {
      this.Null_pages = null_pages;
      this.Min_values = min_values;
      this.Max_values = max_values;
      this.Boundary_order = boundary_order;
    }

    public ColumnIndex DeepCopy()
    {
      var tmp239 = new ColumnIndex();
      if((Null_pages != null))
      {
        tmp239.Null_pages = this.Null_pages.DeepCopy();
      }
      if((Min_values != null))
      {
        tmp239.Min_values = this.Min_values.DeepCopy();
      }
      if((Max_values != null))
      {
        tmp239.Max_values = this.Max_values.DeepCopy();
      }
      tmp239.Boundary_order = this.Boundary_order;
      if((Null_counts != null) && __isset.null_counts)
      {
        tmp239.Null_counts = this.Null_counts.DeepCopy();
      }
      tmp239.__isset.null_counts = this.__isset.null_counts;
      return tmp239;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_null_pages = false;
        bool isset_min_values = false;
        bool isset_max_values = false;
        bool isset_boundary_order = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list240 = await iprot.ReadListBeginAsync(cancellationToken);
                  Null_pages = new List<bool>(_list240.Count);
                  for(int _i241 = 0; _i241 < _list240.Count; ++_i241)
                  {
                    bool _elem242;
                    _elem242 = await iprot.ReadBoolAsync(cancellationToken);
                    Null_pages.Add(_elem242);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_null_pages = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  TList _list243 = await iprot.ReadListBeginAsync(cancellationToken);
                  Min_values = new List<byte[]>(_list243.Count);
                  for(int _i244 = 0; _i244 < _list243.Count; ++_i244)
                  {
                    byte[] _elem245;
                    _elem245 = await iprot.ReadBinaryAsync(cancellationToken);
                    Min_values.Add(_elem245);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_min_values = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list246 = await iprot.ReadListBeginAsync(cancellationToken);
                  Max_values = new List<byte[]>(_list246.Count);
                  for(int _i247 = 0; _i247 < _list246.Count; ++_i247)
                  {
                    byte[] _elem248;
                    _elem248 = await iprot.ReadBinaryAsync(cancellationToken);
                    Max_values.Add(_elem248);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_max_values = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Boundary_order = (global::Parquet.Thrift.BoundaryOrder)await iprot.ReadI32Async(cancellationToken);
                isset_boundary_order = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  TList _list249 = await iprot.ReadListBeginAsync(cancellationToken);
                  Null_counts = new List<long>(_list249.Count);
                  for(int _i250 = 0; _i250 < _list249.Count; ++_i250)
                  {
                    long _elem251;
                    _elem251 = await iprot.ReadI64Async(cancellationToken);
                    Null_counts.Add(_elem251);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_null_pages)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_min_values)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_max_values)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_boundary_order)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp252 = new TStruct("ColumnIndex");
        await oprot.WriteStructBeginAsync(tmp252, cancellationToken);
        var tmp253 = new TField();
        if((Null_pages != null))
        {
          tmp253.Name = "null_pages";
          tmp253.Type = TType.List;
          tmp253.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp253, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Bool, Null_pages.Count), cancellationToken);
            foreach (bool _iter254 in Null_pages)
            {
              await oprot.WriteBoolAsync(_iter254, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Min_values != null))
        {
          tmp253.Name = "min_values";
          tmp253.Type = TType.List;
          tmp253.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp253, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Min_values.Count), cancellationToken);
            foreach (byte[] _iter255 in Min_values)
            {
              await oprot.WriteBinaryAsync(_iter255, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Max_values != null))
        {
          tmp253.Name = "max_values";
          tmp253.Type = TType.List;
          tmp253.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp253, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Max_values.Count), cancellationToken);
            foreach (byte[] _iter256 in Max_values)
            {
              await oprot.WriteBinaryAsync(_iter256, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp253.Name = "boundary_order";
        tmp253.Type = TType.I32;
        tmp253.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp253, cancellationToken);
        await oprot.WriteI32Async((int)Boundary_order, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Null_counts != null) && __isset.null_counts)
        {
          tmp253.Name = "null_counts";
          tmp253.Type = TType.List;
          tmp253.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp253, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I64, Null_counts.Count), cancellationToken);
            foreach (long _iter257 in Null_counts)
            {
              await oprot.WriteI64Async(_iter257, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ColumnIndex other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Null_pages, other.Null_pages)
        && TCollections.Equals(Min_values, other.Min_values)
        && TCollections.Equals(Max_values, other.Max_values)
        && global::System.Object.Equals(Boundary_order, other.Boundary_order)
        && ((__isset.null_counts == other.__isset.null_counts) && ((!__isset.null_counts) || (TCollections.Equals(Null_counts, other.Null_counts))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Null_pages != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Null_pages);
        }
        if((Min_values != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Min_values);
        }
        if((Max_values != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Max_values);
        }
        hashcode = (hashcode * 397) + Boundary_order.GetHashCode();
        if((Null_counts != null) && __isset.null_counts)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Null_counts);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp258 = new StringBuilder("ColumnIndex(");
      if((Null_pages != null))
      {
        tmp258.Append(", Null_pages: ");
        Null_pages.ToString(tmp258);
      }
      if((Min_values != null))
      {
        tmp258.Append(", Min_values: ");
        Min_values.ToString(tmp258);
      }
      if((Max_values != null))
      {
        tmp258.Append(", Max_values: ");
        Max_values.ToString(tmp258);
      }
      tmp258.Append(", Boundary_order: ");
      Boundary_order.ToString(tmp258);
      if((Null_counts != null) && __isset.null_counts)
      {
        tmp258.Append(", Null_counts: ");
        Null_counts.ToString(tmp258);
      }
      tmp258.Append(')');
      return tmp258.ToString();
    }
  }

}
